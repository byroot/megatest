AllCops:
  TargetRubyVersion: 2.6
  NewCops: enable
  SuggestExtensions: false

Metrics:
  Enabled: false

Style/StringLiterals:
  EnforcedStyle: double_quotes

Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: consistent_comma

Style/Documentation:
  Enabled: false

Style/ExpandPathArguments:
  # This cop is wrong, `__FILE__` and `__dir__` can't always be substitued
  Enabled: false

Style/CaseEquality:
  Enabled: false # I know what I'm doing, thanks.

Style/EvalWithLocation:
  Enabled: false # I know what I'm doing, thanks.

Style/GuardClause:
  Enabled: false # Isn't always better.

Style/IfUnlessModifier:
  Enabled: false # Doesn't always make sense.

Style/FormatStringToken:
  Enabled: false # Pointless.

Style/RedundantHeredocDelimiterQuotes:
  Enabled: false

Style/WordArray:
  Enabled: false # Most of the time yes, but not always

Style/Alias:
  Enabled: false # Are you out of your mind?

Style/ParallelAssignment:
  Enabled: false # Grumble

Style/PercentLiteralDelimiters:
  Enabled: false # Mind your own business

Style/EmptyMethod:
  Enabled: false # Disagree.

Style/InfiniteLoop:
  Enabled: false

Style/ClassCheck:
  Enabled: false # How am I supposed to implement assert_kind_of...

Style/StderrPuts:
  Enabled: false

Style/YodaCondition:
  # Yoda style is a good idea for a test framework that need to do defensive programing
  Enabled: false

Style/ConditionalAssignment:
  Enabled: false # Yes but not always

Style/AccessorGrouping:
  Enabled: false # Sometimes needed for documentation purposes

Style/ModuleFunction:
  Enabled: false # Just no.

Style/RedundantFreeze:
  Enabled: false # Once again... You're wrong.

Style/RescueStandardError:
  Enabled: false # Once again... You're wrong.


Layout/CaseIndentation:
  EnforcedStyle: end

Layout/LineContinuationLeadingSpace:
  Enabled: false

Layout/FirstArrayElementIndentation:
  Enabled: false

Layout/EndAlignment:
  EnforcedStyleAlignWith: start_of_line

Layout/LineLength:
  Enabled: false # True, but sometimes it's just painful


Naming/RescuedExceptionsVariableName:
  # Enforcing `e` as an exception name? WTF!
  Enabled: false

Naming/VariableNumber:
  Enabled: false # WTF? Mind your own business.

Naming/MemoizedInstanceVariableName:
  Enabled: false


Lint/EmptyBlock:
  Enabled: false # I know what I'm doing, thanks.

Lint/UnusedMethodArgument:
  AllowUnusedKeywordArguments: true

Lint/AmbiguousBlockAssociation:
  Enabled: false # I know what I'm doing, thanks.

Lint/RescueException:
  Enabled: false # I know what I'm doing, thanks.

Lint/InheritException:
  Enabled: false # I know what I'm doing, thanks.

Lint/AssignmentInCondition:
  Enabled: false # I know what I'm doing, thanks.

Lint/SuppressedException:
  Enabled: false # I know what I'm doing, thanks.

Lint/RedundantRequireStatement:
  Enabled: false # You're an idiot, I need to require "pp" to use PP.pretty_print


Security/MarshalLoad:
  Enabled: false # I know what I'm doing, thanks.

Bundler/OrderedGems:
  Enabled: false # I'm out of words...
